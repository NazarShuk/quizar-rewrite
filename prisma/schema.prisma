generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["new-quizar"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  studySets StudySet[]

  @@schema("new-quizar")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("new-quizar")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("new-quizar")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("new-quizar")
}

model StudySet {
  id   String @id @default(cuid())
  name String

  terms TermDefinition[]

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("new-quizar")
}

model TermDefinition {
  id String @id @default(cuid())

  term       String
  definition String
  StudySet   StudySet? @relation(fields: [studySetId], references: [id], onDelete: Cascade)
  studySetId String?

  @@schema("new-quizar")
}
